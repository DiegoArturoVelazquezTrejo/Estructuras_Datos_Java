--- src/main/java/mx/unam/ciencias/edd/ArbolBinario.java
+++ src/main/java/mx/unam/ciencias/edd/ArbolBinario.java
@@ -29,7 +29,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @param elemento el elemento del vértice.
          */
         public Vertice(T elemento) {
-            // Aquí va su código.
+            this.elemento = elemento;
         }
 
         /**
@@ -38,7 +38,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          *         <code>false</code> en otro caso.
          */
         @Override public boolean hayPadre() {
-            // Aquí va su código.
+            return this.padre != null;
         }
 
         /**
@@ -47,7 +47,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          *         <code>false</code> en otro caso.
          */
         @Override public boolean hayIzquierdo() {
-            // Aquí va su código.
+            return this.izquierdo != null;
         }
 
         /**
@@ -56,7 +56,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          *         <code>false</code> en otro caso.
          */
         @Override public boolean hayDerecho() {
-            // Aquí va su código.
+            return this.derecho != null;
         }
 
         /**
@@ -65,7 +65,8 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @throws NoSuchElementException si el vértice no tiene padre.
          */
         @Override public VerticeArbolBinario<T> padre() {
-            // Aquí va su código.
+            if(!hayPadre()) throw new NoSuchElementException("No tiene nodo padre");
+            return this.padre;
         }
 
         /**
@@ -74,7 +75,8 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @throws NoSuchElementException si el vértice no tiene izquierdo.
          */
         @Override public VerticeArbolBinario<T> izquierdo() {
-            // Aquí va su código.
+          if(!hayIzquierdo()) throw new NoSuchElementException("No tiene nodo izquierdo");
+          return this.izquierdo;
         }
 
         /**
@@ -83,7 +85,8 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @throws NoSuchElementException si el vértice no tiene derecho.
          */
         @Override public VerticeArbolBinario<T> derecho() {
-            // Aquí va su código.
+          if(!hayDerecho()) throw new NoSuchElementException("No tiene nodo derecho");
+          return this.derecho;
         }
 
         /**
@@ -91,7 +94,12 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @return la altura del vértice.
          */
         @Override public int altura() {
-            // Aquí va su código.
+          return altura(this);
+        }
+
+        private int altura(Vertice vertice){
+          if(vertice == null ) return -1;
+          return 1 + Math.max(altura(vertice.izquierdo), altura(vertice.derecho));
         }
 
         /**
@@ -99,7 +107,12 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @return la profundidad del vértice.
          */
         @Override public int profundidad() {
-            // Aquí va su código.
+          return profundidad(this);
+        }
+
+        private int profundidad(Vertice vertice){
+          if(vertice.padre == null) return 0;
+          return 1 + profundidad(vertice.padre);
         }
 
         /**
@@ -107,7 +120,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @return el elemento al que apunta el vértice.
          */
         @Override public T get() {
-            // Aquí va su código.
+            return this.elemento;
         }
 
         /**
@@ -124,7 +137,35 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
             if (objeto == null || getClass() != objeto.getClass())
                 return false;
             @SuppressWarnings("unchecked") Vertice vertice = (Vertice)objeto;
-            // Aquí va su código.
+            if(vertice == null) return false;
+            return equals(this, vertice);
+
+        }
+
+        private boolean equals(Vertice v1, Vertice v2){
+          if(v1 == null && v2 != null || v1 != null && v2 == null) return false;
+          if(v1.hayIzquierdo() && v2.hayIzquierdo() && v1.hayDerecho() && v2.hayDerecho()){
+            if(v1.elemento.equals(v2.elemento))
+              return equals(v1.izquierdo, v2.izquierdo) && equals(v1.derecho, v2.derecho);
+            else
+              return false;
+          }
+          else if(v1.hayIzquierdo() && v2.hayIzquierdo() && !v1.hayDerecho() && !v2.hayDerecho())
+            if(v1.elemento.equals(v2.elemento))
+              return equals(v1.izquierdo, v2.izquierdo);
+            else
+              return false;
+          else if(v1.hayDerecho() && v2.hayDerecho() && !v1.hayIzquierdo() && !v2.hayIzquierdo())
+            if(v1.elemento.equals(v2.elemento))
+              return equals(v1.derecho, v2.derecho);
+            else
+              return false;
+          else if(!v1.hayDerecho() && !v2.hayDerecho() && !v1.hayIzquierdo() && !v2.hayIzquierdo()){
+            T ev1 = v1.elemento;
+            T ev2 = v2.elemento;
+            return ev1.equals(ev2);
+          }
+          return false;
         }
 
         /**
@@ -132,7 +173,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @return una representación en cadena del vértice.
          */
         public String toString() {
-            // Aquí va su código.
+          return String.valueOf(this.elemento);
         }
     }
 
@@ -153,7 +194,8 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      *        binario.
      */
     public ArbolBinario(Coleccion<T> coleccion) {
-        // Aquí va su código.
+      for(T elemento : coleccion )
+        this.agrega(elemento);
     }
 
     /**
@@ -166,7 +208,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      * @return un nuevo vértice con el elemento recibido dentro del mismo.
      */
     protected Vertice nuevoVertice(T elemento) {
-        // Aquí va su código.
+        return new Vertice(elemento);
     }
 
     /**
@@ -175,7 +217,8 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      * @return la altura del árbol.
      */
     public int altura() {
-        // Aquí va su código.
+        if(this.elementos == 0) return -1;
+        return this.raiz.altura();
     }
 
     /**
@@ -183,7 +226,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      * @return el número de elementos en el árbol.
      */
     @Override public int getElementos() {
-        // Aquí va su código.
+        return this.elementos;
     }
 
     /**
@@ -193,7 +236,13 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      *         <code>false</code> en otro caso.
      */
     @Override public boolean contiene(T elemento) {
-        // Aquí va su código.
+      if(elemento == null) throw new IllegalArgumentException("Elemento inválido");
+      return contiene(this.raiz, elemento);
+    }
+
+    private boolean contiene(Vertice vertice, T elemento){
+      if(vertice == null) return false;
+      return busca(elemento) != null;
     }
 
     /**
@@ -204,7 +253,16 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      *         <code>null</code> en otro caso.
      */
     public VerticeArbolBinario<T> busca(T elemento) {
-        // Aquí va su código.
+      if(elemento == null ) throw new IllegalArgumentException("Elemento inválido");
+      return busca(raiz, elemento);
+    }
+
+    private VerticeArbolBinario<T> busca(Vertice vertice, T elemento){
+      if(vertice == null) return null;
+      if(vertice.elemento.equals(elemento)) return vertice;
+      VerticeArbolBinario<T> parteIzquierda = busca(vertice.izquierdo, elemento);
+      VerticeArbolBinario<T> parteDerecha   = busca(vertice.derecho, elemento);
+      return parteIzquierda != null ? parteIzquierda : parteDerecha;
     }
 
     /**
@@ -213,7 +271,8 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      * @throws NoSuchElementException si el árbol es vacío.
      */
     public VerticeArbolBinario<T> raiz() {
-        // Aquí va su código.
+        if(this.raiz == null) throw new NoSuchElementException("Arbol no tiene raíz");
+        return this.raiz;
     }
 
     /**
@@ -222,14 +281,15 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      *         otro caso.
      */
     @Override public boolean esVacia() {
-        // Aquí va su código.
+        return this.elementos == 0;
     }
 
     /**
      * Limpia el árbol de elementos, dejándolo vacío.
      */
     @Override public void limpia() {
-        // Aquí va su código.
+        this.raiz = null;
+        this.elementos = 0;
     }
 
     /**
@@ -241,9 +301,16 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
     @Override public boolean equals(Object objeto) {
         if (objeto == null || getClass() != objeto.getClass())
             return false;
-        @SuppressWarnings("unchecked")
-            ArbolBinario<T> arbol = (ArbolBinario<T>)objeto;
-        // Aquí va su código.
+        @SuppressWarnings("unchecked") ArbolBinario<T> arbol = (ArbolBinario<T>)objeto;
+        if(this.esVacia() && arbol.esVacia())
+          return true;
+        if((this.getElementos() > arbol.getElementos()) || (this.getElementos() < arbol.getElementos()))
+          return false;
+        if(this.esVacia() && arbol.esVacia())
+          return true;
+        if(this.elementos == arbol.getElementos())
+          return raiz.equals(arbol.raiz);
+        return false;
     }
 
     /**
@@ -251,7 +318,47 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      * @return una representación en cadena del árbol.
      */
     @Override public String toString() {
-        // Aquí va su código.
+      if(raiz == null) return "";
+      int[] a = new int[this.altura() + 1];
+      for(int i = 0; i < a.length; i++)
+        a[i] = 0;
+      return toString(this.raiz, 0, a);
+    }
+
+    private String toString(Vertice v, int l, int[] a){
+      String s = v.toString()+ "\n";
+      a[l] = 1;
+      if(v.hayIzquierdo() && v.hayDerecho()){
+        s = s + dibujaEspacios(l,a);
+        s = s + "├─›";
+        s = s + toString(v.izquierdo, l+1, a);
+        s = s + dibujaEspacios(l, a);
+        s = s + "└─»";
+        a[l] = 0;
+        s = s + toString(v.derecho, l+1, a);
+      }
+      else if(v.hayIzquierdo()){
+        s = s + dibujaEspacios(l, a);
+        s = s + "└─›";
+        a[l] = 0;
+        s = s+ toString(v.izquierdo, l+1, a);
+      }
+      else if(v.hayDerecho()){
+        s = s + dibujaEspacios(l, a);
+        s = s + "└─»";
+        a[l] = 0;
+        s = s + toString(v.derecho, l+1, a);
+      }
+      return s;
+    }
+
+    private String dibujaEspacios(int l, int[] a){
+      String s = "";
+      for(int i = 0; i < l; i++){
+        if(a[i] == 1) s = s + "│  ";
+        else s = s + "   ";
+      }
+      return s;
     }
 
     /**
