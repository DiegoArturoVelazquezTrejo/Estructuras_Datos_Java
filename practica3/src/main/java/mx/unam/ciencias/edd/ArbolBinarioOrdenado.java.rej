--- src/main/java/mx/unam/ciencias/edd/ArbolBinarioOrdenado.java
+++ src/main/java/mx/unam/ciencias/edd/ArbolBinarioOrdenado.java
@@ -1,6 +1,7 @@
 package mx.unam.ciencias.edd;
 
 import java.util.Iterator;
+import java.util.NoSuchElementException;
 
 /**
  * <p>Clase para árboles binarios ordenados. Los árboles son genéricos, pero
@@ -25,17 +26,30 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
 
         /* Inicializa al iterador. */
         public Iterador() {
-            // Aquí va su código.
+          pila = new Pila<Vertice>();
+          Vertice v = raiz;
+          while(v != null){
+            pila.mete(v);
+            v = v.izquierdo;
+          }
         }
 
         /* Nos dice si hay un elemento siguiente. */
         @Override public boolean hasNext() {
-            // Aquí va su código.
+          return !pila.esVacia();
         }
 
         /* Regresa el siguiente elemento en orden DFS in-order. */
         @Override public T next() {
-            // Aquí va su código.
+          if(pila.esVacia()) throw new NoSuchElementException("Pila vacía");
+          Vertice v = pila.saca();
+          T elemento = v.elemento;
+          v = v.derecho;
+          while(v != null){
+            pila.mete(v);
+            v = v.izquierdo;
+          }
+          return elemento;
         }
     }
 
@@ -69,9 +83,37 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      * @param elemento el elemento a agregar.
      */
     @Override public void agrega(T elemento) {
-        // Aquí va su código.
+      if(elemento == null) throw new IllegalArgumentException();
+      Vertice agregado = nuevoVertice(elemento);
+      this.elementos++;
+      if(raiz == null){
+        raiz = agregado;
+        ultimoAgregado = raiz;
+      }
+      else
+        agrega(raiz, agregado);
     }
 
+    private void agrega(Vertice nodo, Vertice agregado){
+      if(nodo.elemento.compareTo(agregado.elemento) >= 0){
+        if(nodo.hayIzquierdo())
+          agrega(nodo.izquierdo, agregado);
+        else{
+          nodo.izquierdo = agregado;
+          agregado.padre = nodo;
+        }
+      }else{
+        if(nodo.hayDerecho())
+          agrega(nodo.derecho, agregado);
+        else{
+          nodo.derecho = agregado;
+          agregado.padre = nodo;
+        }
+      }
+      ultimoAgregado = agregado;
+    }
+
+
     /**
      * Elimina un elemento. Si el elemento no está en el árbol, no hace nada; si
      * está varias veces, elimina el primero que encuentre (in-order). El árbol
@@ -79,7 +121,21 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      * @param elemento el elemento a eliminar.
      */
     @Override public void elimina(T elemento) {
-        // Aquí va su código.
+      Vertice v = vertice(busca(elemento));
+      Vertice padre;
+      if(v == null) return;
+      this.elementos--;
+      if(v.hayIzquierdo() && v.hayDerecho()){
+        Vertice eliminable = intercambiaEliminable(v);
+        eliminaVertice(eliminable);
+      }
+      else
+        eliminaVertice(v);
+    }
+
+    private Vertice maximoEnSubArbol(Vertice v){
+      if(!v.hayDerecho()) return v;
+      return maximoEnSubArbol(v.derecho);
     }
 
     /**
@@ -92,7 +148,10 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      *         de <code>null</code>.
      */
     protected Vertice intercambiaEliminable(Vertice vertice) {
-        // Aquí va su código.
+      Vertice verticeMaximo = maximoEnSubArbol(vertice.izquierdo);
+      T elementoMaximo = verticeMaximo.elemento;
+      vertice.elemento = elementoMaximo;
+      return verticeMaximo;
     }
 
     /**
@@ -102,7 +161,44 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      *                distinto de <code>null</code>.
      */
     protected void eliminaVertice(Vertice vertice) {
-        // Aquí va su código.
+      // Caso en donde el vértice no tiene hijos y puede ser la raíz
+      if(vertice == this.raiz && !vertice.hayDerecho() && !vertice.hayIzquierdo())
+        this.raiz = null;
+      else if(vertice == this.raiz && vertice.hayDerecho()){
+        this.raiz = vertice.derecho;
+        vertice.derecho.padre = null;
+      }
+      else if(vertice == this.raiz && vertice.hayIzquierdo()){
+        this.raiz = vertice.izquierdo;
+        vertice.izquierdo.padre = null;
+      }
+      // Caso en donde el vértice no tiene hijos y NO es la raíz
+      else if(!vertice.hayDerecho() && !vertice.hayIzquierdo()){
+        if(vertice.padre.hayIzquierdo() && vertice.padre.izquierdo == vertice)
+          vertice.padre.izquierdo = null;
+        else
+          vertice.padre.derecho = null;
+      }
+      // Caso en donde el vértice tiene un hijo derecho
+      else if(vertice.hayDerecho()){
+        if(vertice.padre.hayIzquierdo() && vertice.padre.izquierdo == vertice){
+          vertice.padre.izquierdo = vertice.derecho;
+          vertice.derecho.padre = vertice.padre;
+        }else{
+          vertice.padre.derecho = vertice.derecho;
+          vertice.derecho.padre = vertice.padre;
+        }
+      }
+      // Caso en donde el vértice tiene un hijo izquierdo
+      else if(vertice.hayIzquierdo()){
+        if(vertice.padre.hayIzquierdo() && vertice.padre.izquierdo == vertice){
+          vertice.padre.izquierdo = vertice.izquierdo;
+          vertice.izquierdo.padre = vertice.padre;
+        }else{
+          vertice.padre.derecho = vertice.izquierdo;
+          vertice.izquierdo.padre = vertice.padre;
+        }
+      }
     }
 
     /**
@@ -113,7 +209,18 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      *         encuentra; <code>null</code> en otro caso.
      */
     @Override public VerticeArbolBinario<T> busca(T elemento) {
-        // Aquí va su código.
+      if(elemento == null) throw new IllegalArgumentException();
+      return busca(this.raiz, elemento);
+    }
+
+    private VerticeArbolBinario<T> busca(Vertice vertice, T elemento){
+      if (vertice == null || elemento == null)
+        return null;
+      if (elemento.compareTo(vertice.get()) == 0)
+        return vertice;
+      if (elemento.compareTo(vertice.get()) < 0)
+        return busca(vertice.izquierdo, elemento);
+      return busca(vertice.derecho, elemento);
     }
 
     /**
@@ -128,7 +235,7 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      *         elemento al árbol.
      */
     public VerticeArbolBinario<T> getUltimoVerticeAgregado() {
-        // Aquí va su código.
+        return this.ultimoAgregado;
     }
 
     /**
@@ -136,8 +243,24 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      * tiene hijo izquierdo, el método no hace nada.
      * @param vertice el vértice sobre el que vamos a girar.
      */
-    public void giraDerecha(VerticeArbolBinario<T> vertice) {
-        // Aquí va su código.
+    public void giraDerecha(VerticeArbolBinario<T> v) {
+      if (v == null || !v.hayIzquierdo())
+            return;
+        Vertice q = vertice(v);
+        Vertice p = q.izquierdo;
+        p.padre = q.padre;
+        if(q != this.raiz)
+            if(q.padre.izquierdo == q )
+                q.padre.izquierdo = p;
+            else
+                q.padre.derecho = p;
+        else
+            raiz = p;
+        q.izquierdo = p.derecho;
+        if(p.hayDerecho())
+            p.derecho.padre = q;
+        p.derecho = q;
+        q.padre = p;
     }
 
     /**
@@ -145,8 +268,25 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      * tiene hijo derecho, el método no hace nada.
      * @param vertice el vértice sobre el que vamos a girar.
      */
-    public void giraIzquierda(VerticeArbolBinario<T> vertice) {
-        // Aquí va su código.
+    public void giraIzquierda(VerticeArbolBinario<T> v) {
+        if(v == null || !v.hayDerecho())
+          return;
+        Vertice p = vertice(v);
+        Vertice q = p.derecho;
+        q.padre = p.padre;
+        if(this.raiz != p){
+          if(p.padre.izquierdo == p)
+            p.padre.izquierdo = q;
+          else
+            p.padre.derecho = q;
+        }
+        else
+          this.raiz = q;
+        p.derecho = q.izquierdo;
+        if(q.hayIzquierdo())
+          q.izquierdo.padre = p;
+        q.izquierdo = p;
+        p.padre = q;
     }
 
     /**
@@ -155,7 +295,14 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      * @param accion la acción a realizar en cada elemento del árbol.
      */
     public void dfsPreOrder(AccionVerticeArbolBinario<T> accion) {
-        // Aquí va su código.
+      dfsPreOrder(this.raiz, accion);
+    }
+
+    private void dfsPreOrder(Vertice vertice, AccionVerticeArbolBinario<T> accion){
+      if(vertice == null) return;
+      accion.actua(vertice);
+      dfsPreOrder(vertice.izquierdo, accion);
+      dfsPreOrder(vertice.derecho, accion );
     }
 
     /**
@@ -164,7 +311,14 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      * @param accion la acción a realizar en cada elemento del árbol.
      */
     public void dfsInOrder(AccionVerticeArbolBinario<T> accion) {
-        // Aquí va su código.
+      dfsInOrder(this.raiz, accion);
+    }
+
+    private void dfsInOrder(Vertice vertice, AccionVerticeArbolBinario<T> accion){
+      if(vertice == null) return;
+      dfsInOrder(vertice.izquierdo, accion);
+      accion.actua(vertice);
+      dfsInOrder(vertice.derecho, accion );
     }
 
     /**
@@ -173,7 +327,14 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      * @param accion la acción a realizar en cada elemento del árbol.
      */
     public void dfsPostOrder(AccionVerticeArbolBinario<T> accion) {
-        // Aquí va su código.
+      dfsPostOrder(this.raiz, accion);
+    }
+
+    private void dfsPostOrder(Vertice vertice, AccionVerticeArbolBinario<T> accion){
+      if(vertice == null) return;
+      dfsPostOrder(vertice.izquierdo, accion);
+      dfsPostOrder(vertice.derecho, accion );
+      accion.actua(vertice);
     }
 
     /**
